--# selene: allow(unused_variable)
---@diagnostic disable: unused-local

-- number	(default 7)
-- 			global
-- 	Number of screen lines to use for the command-line window. |cmdwin|
vim.o.cmdwinheight = "7"
-- string	(default "n-v-c-sm:block,i-ci-ve:ver25,r-cr-o:hor20")
-- 			global
-- 	Configures the cursor style for each mode. Works in the GUI and many
-- 	terminals.  See |tui-cursor-shape|.
vim.o.guicursor = "n-v-c-sm:block,i-ci-ve:ver25,r-cr-o:hor20"
-- string	(default: "menu,preview")
-- 			global
-- 	A comma separated list of options for Insert mode completion
-- 	|ins-completion|.  The supported values are:
vim.o.completeopt = "menu,preview"
-- string	(Vim default: "aABceFs_",
-- 				 Vi default: all flags)
-- 			global
-- 	A sequence of single character flags.  When a character is present
-- 	this indicates Vi-compatible behavior.  This is used for things where
-- 	not being Vi-compatible is mostly or sometimes preferred.
-- 	'cpoptions' stands for "compatible-options".
-- 	Commas can be added for readability.
-- 	To avoid problems with flags that are added in the future, use the
-- 	"+=" and "-=" feature of ":set" |add-option-flags|.
vim.o.cpoptions = "aABceFs_"
-- number	(default 0)
-- 			global
-- 	Determines how many components of the path to show in a list of tags.
-- 	See |cscopepathcomp|.
vim.o.cscopepathcomp = "0"
-- string	(default "^\s*#\s*include")
-- 			global or local to buffer |global-local|
-- 	Pattern to be used to find an include command.  It is a search
-- 	pattern, just like for the "/" command (See |pattern|).  The default
-- 	value is for C programs.  This option is used for the commands "[i",
-- 	"]I", "[d", etc.
-- 	Normally the 'isfname' option is used to recognize the file name that
-- 	comes after the matched pattern.  But if "\zs" appears in the pattern
-- 	then the text matched from "\zs" to the end, or until "\ze" if it
-- 	appears, is used as the file name.  Use this to include characters
-- 	that are not in 'isfname', such as a space.  You can then use
-- 	'includeexpr' to process the matched text.
-- 	See |option-backslash| about including spaces and backslashes.
vim.o.include = "^\\s*#\\s*include"
-- string	(default "")
-- 			global
-- 	Specifies whether to use quickfix window to show cscope results.
-- 	See |cscopequickfix|.
vim.o.cscopequickfix = ""
-- boolean (default off)
-- 			global
-- 	In the absence of a prefix (-P) for cscope. setting this option enables
-- 	to use the basename of cscope.out path as the prefix.
-- 	See |cscoperelative|.
vim.o.cscoperelative = "false"
-- boolean (default off)
-- 			global
-- 	Use cscope for tag commands.  See |cscope-options|.
vim.o.cscopetag = "false"
-- number	(default 0)
-- 			global
-- 	Determines the order in which ":cstag" performs a search.  See
-- 	|cscopetagorder|.
vim.o.cscopetagorder = "0"
-- boolean (default off)
-- 			global
-- 	If editing Unicode and this option is set, backspace and Normal mode
-- 	"x" delete each combining character on its own.  When it is off (the
-- 	default) the character along with its combining characters are
-- 	deleted.
-- 	Note: When 'delcombine' is set "xx" may work different from "2x"!
vim.o.delcombine = "false"
-- string	(default "")
-- 			global
-- 	Expression which is evaluated to obtain a diff file (either ed-style
-- 	or unified-style) from two versions of a file.  See |diff-diffexpr|.
-- 	This option cannot be set from a |modeline| or in the |sandbox|, for
-- 	security reasons.
vim.o.diffexpr = ""
-- boolean	(default off)
-- 			global
-- 	Enable the entering of digraphs in Insert mode with {char1} <BS>
-- 	{char2}.  See |digraphs|.
vim.o.digraph = "false"
-- string	(default "both")
-- 			global
-- 	Tells when the 'equalalways' option applies:
-- 		ver	vertically, width of windows is not affected
-- 		hor	horizontally, height of windows is not affected
-- 		both	width and height of windows is affected
vim.o.eadirection = "both"
-- boolean (default: on)
-- 			global
-- 	When on all Unicode emoji characters are considered to be full width.
vim.o.emoji = "true"
-- boolean	(default on)
-- 			global
-- 	When on, all the windows are automatically made the same size after
-- 	splitting or closing a window.  This also happens the moment the
-- 	option is switched on.  When off, splitting a window will reduce the
-- 	size of the current window and leave the other windows the same.  When
-- 	closing a window the extra lines are given to the window next to it
-- 	(depending on 'splitbelow' and 'splitright').
-- 	When mixing vertically and horizontally split windows, a minimal size
-- 	is computed and some windows may be larger if there is room.  The
-- 	'eadirection' option tells in which direction the size is affected.
-- 	Changing the height and width of a window can be avoided by setting
-- 	'winfixheight' and 'winfixwidth', respectively.
-- 	If a window size is specified when creating a new window sizes are
-- 	currently not equalized (it's complicated, but may be implemented in
-- 	the future).
vim.o.equalalways = "true"
-- string	(default "")
-- 			global or local to buffer |global-local|
-- 	External program to use for "=" command.  When this option is empty
-- 	the internal formatting functions are used; either 'lisp', 'cindent'
-- 	or 'indentexpr'.  When Vim was compiled without internal formatting,
-- 	the "indent" program is used.
-- 	Environment variables are expanded |:set_env|.  See |option-backslash|
-- 	about including spaces and backslashes.
-- 	This option cannot be set from a |modeline| or in the |sandbox|, for
-- 	security reasons.
vim.o.equalprg = ""
-- boolean	(default off)
-- 			global
-- 	Ring the bell (beep or screen flash) for error messages.  This only
-- 	makes a difference for error messages, the bell will be used always
-- 	for a lot of errors without a message (e.g., hitting <Esc> in Normal
-- 	mode).  See 'visualbell' to make the bell behave like a screen flash
-- 	or do nothing. See 'belloff' to finetune when to ring the bell.
vim.o.errorbells = "false"
-- string	(default: "errors.err")
-- 			global
-- 	Name of the errorfile for the QuickFix mode (see |:cf|).
-- 	When the "-q" command-line argument is used, 'errorfile' is set to the
-- 	following argument.  See |-q|.
-- 	NOT used for the ":make" command.  See 'makeef' for that.
-- 	Environment variables are expanded |:set_env|.
-- 	See |option-backslash| about including spaces and backslashes.
-- 	This option cannot be set from a |modeline| or in the |sandbox|, for
-- 	security reasons.
vim.o.errorfile = "errors.err"
-- string	(default is very long)
-- 			global or local to buffer |global-local|
-- 	Scanf-like description of the format for the lines in the error file
-- 	(see |errorformat|).
vim.o.errorformat = "%*[^\"]\"%f\"%*\\D%l: %m,\"%f\"%*\\D%l: %m,%-G%f:%l: (Each undeclared identifier is reported only once,%-G%f:%l: for each function it appears in.),%-GIn file included from %f:%l:%c:,%-GIn file included from %f:%l:%c\\,,%-GIn file included from %f:%l:%c,%-GIn file included from %f:%l,%-G%*[ ]from %f:%l:%c,%-G%*[ ]from %f:%l:,%-G%*[ ]from %f:%l\\,,%-G%*[ ]from %f:%l,%f:%l:%c:%m,%f(%l):%m,%f:%l:%m,\"%f\"\\, line %l%*\\D%c%*[^ ] %m,%D%*\\a[%*\\d]: Entering directory %*[`']%f',%X%*\\a[%*\\d]: Leaving directory %*[`']%f',%D%*\\a: Entering directory %*[`']%f',%X%*\\a: Leaving directory %*[`']%f',%DMaking %*\\a in %f,%f|%l| %m"
-- boolean	(default off)
-- 			global
-- 	When on, the title of the window will be set to the value of
-- 	'titlestring' (if it is not empty), or to:
-- 		filename [+=-] (path) - NVIM
-- 	Where:
-- 		filename	the name of the file being edited
-- 		-		indicates the file cannot be modified, 'ma' off
-- 		+		indicates the file was modified
-- 		=		indicates the file is read-only
-- 		=+		indicates the file is read-only and modified
-- 		(path)		is the path of the file being edited
-- 		- NVIM		the server name |v:servername| or "NVIM"
vim.o.title = "false"
-- string (default:
-- 				Vim+Vi	Win32: "dos,unix",
-- 				Vim	Unix: "unix,dos",
-- 				Vi	others: "")
-- 			global
-- 	This gives the end-of-line (<EOL>) formats that will be tried when
-- 	starting to edit a new buffer and when reading a file into an existing
-- 	buffer:
-- 	- When empty, the format defined with 'fileformat' will be used
-- 	  always.  It is not set automatically.
-- 	- When set to one name, that format will be used whenever a new buffer
-- 	  is opened.  'fileformat' is set accordingly for that buffer.  The
-- 	  'fileformats' name will be used when a file is read into an existing
-- 	  buffer, no matter what 'fileformat' for that buffer is set to.
-- 	- When more than one name is present, separated by commas, automatic
-- 	  <EOL> detection will be done when reading a file.  When starting to
-- 	  edit a file, a check is done for the <EOL>:
-- 	  1. If all lines end in <CR><NL>, and 'fileformats' includes "dos",
-- 	     'fileformat' is set to "dos".
-- 	  2. If a <NL> is found and 'fileformats' includes "unix", 'fileformat'
-- 	     is set to "unix".  Note that when a <NL> is found without a
-- 	     preceding <CR>, "unix" is preferred over "dos".
-- 	  3. If 'fileformat' has not yet been set, and if a <CR> is found, and
-- 	     if 'fileformats' includes "mac", 'fileformat' is set to "mac".
-- 	     This means that "mac" is only chosen when:
-- 	      "unix" is not present or no <NL> is found in the file, and
-- 	      "dos" is not present or no <CR><NL> is found in the file.
-- 	     Except: if "unix" was chosen, but there is a <CR> before
-- 	     the first <NL>, and there appear to be more <CR>s than <NL>s in
-- 	     the first few lines, "mac" is used.
-- 	  4. If 'fileformat' is still not set, the first name from
-- 	     'fileformats' is used.
-- 	  When reading a file into an existing buffer, the same is done, but
-- 	  this happens like 'fileformat' has been set appropriately for that
-- 	  file only, the option is not changed.
-- 	When 'binary' is set, the value of 'fileformats' is not used.
vim.o.fileformats = "unix,dos"
-- boolean	(default on for systems where case in file
-- 				 names is normally ignored)
-- 			global
-- 	When set case is ignored when using file names and directories.
-- 	See 'wildignorecase' for only ignoring case when doing completion.
vim.o.fileignorecase = "true"
-- number	(default 1)
-- 			global
-- 	Number of screen lines to use for the command-line.  Helps avoiding
-- 	|hit-enter| prompts.
-- 	The value of this option is stored with the tab page, so that each tab
-- 	page can have a different value.
vim.o.cmdheight = "1"
-- string (default "")
-- 			global
-- 	When set to "all", a fold is closed when the cursor isn't in it and
-- 	its level is higher than 'foldlevel'.  Useful if you want folds to
-- 	automatically close when moving out of them.
vim.o.foldclose = ""
-- number (default: -1)
-- 			global
-- 	Sets 'foldlevel' when starting to edit another buffer in a window.
-- 	Useful to always start editing with all folds closed (value zero),
-- 	some folds closed (one) or no folds closed (99).
-- 	This is done before reading any modeline, thus a setting in a modeline
-- 	overrules this option.  Starting to edit a file for |diff-mode| also
-- 	ignores this option and closes all folds.
-- 	It is also done before BufReadPre autocommands, to allow an autocmd to
-- 	overrule the 'foldlevel' value for specific files.
-- 	When the value is negative, it is not used.
vim.o.foldlevelstart = "-1"
-- string (default: "block,hor,mark,percent,quickfix,
-- 							     search,tag,undo")
-- 			global
-- 	Specifies for which type of commands folds will be opened, if the
-- 	command moves the cursor into a closed fold.  It is a comma separated
-- 	list of items.
-- 	NOTE: When the command is part of a mapping this option is not used.
-- 	Add the |zv| command to the mapping to get the same effect.
-- 	(rationale: the mapping may want to control opening folds itself)
vim.o.foldopen = "block,hor,mark,percent,quickfix,search,tag,undo"
-- string	(default empty)
-- 			global
-- 	When nonempty, this option determines the content of the tab pages
-- 	line at the top of the Vim window.  When empty Vim will use a default
-- 	tab pages line.  See |setting-tabline| for more info.
vim.o.tabline = ""
-- string	(default $SHELL or "sh",
-- 					Windows: "cmd.exe")
-- 			global
-- 	Name of the shell to use for ! and :! commands.  When changing the
-- 	value also check these options: 'shellpipe', 'shellslash'
-- 	'shellredir', 'shellquote', 'shellxquote' and 'shellcmdflag'.
-- 	It is allowed to give an argument to the command, e.g.  "csh -f".
-- 	See |option-backslash| about including spaces and backslashes.
-- 	Environment variables are expanded |:set_env|.
-- 	If the name of the shell contains a space, you might need to enclose
-- 	it in quotes.  Example: >
-- 		:set shell=\"c:\program\ files\unix\sh.exe\"\ -f
-- <	Note the backslash before each quote (to avoid starting a comment) and
-- 	each space (to avoid ending the option value), so better use |:let-&|
-- 	like this: >
-- 		:let &shell='"C:\Program Files\unix\sh.exe" -f'
-- <	Also note that the "-f" is not inside the quotes, because it is not
-- 	part of the command name.
-- 							*shell-unquoting*
-- 	Rules regarding quotes:
-- 	1. Option is split on space and tab characters that are not inside
-- 	   quotes: "abc def" runs shell named "abc" with additional argument
-- 	   "def", '"abc def"' runs shell named "abc def" with no additional
-- 	   arguments (here and below: additional means “additional to
-- 	   'shellcmdflag'”).
-- 	2. Quotes in option may be present in any position and any number:
-- 	   '"abc"', '"a"bc', 'a"b"c', 'ab"c"' and '"a"b"c"' are all equivalent
-- 	   to just "abc".
-- 	3. Inside quotes backslash preceding backslash means one backslash.
-- 	   Backslash preceding quote means one quote. Backslash preceding
-- 	   anything else means backslash and next character literally:
-- 	   '"a\\b"' is the same as "a\b", '"a\\"b"' runs shell named literally
-- 	   'a"b', '"a\b"' is the same as "a\b" again.
-- 	4. Outside of quotes backslash always means itself, it cannot be used
-- 	   to escape quote: 'a\"b"' is the same as "a\b".
-- 	Note that such processing is done after |:set| did its own round of
-- 	unescaping, so to keep yourself sane use |:let-&| like shown above.
-- 							*shell-powershell*
-- 	To use powershell: >
-- 		let &shell = has('win32') ? 'powershell' : 'pwsh'
-- 		set shellquote= shellpipe=\| shellxquote=
-- 		set shellcmdflag=-NoLogo\ -NoProfile\ -ExecutionPolicy\ RemoteSigned\ -Command
-- 		set shellredir=\|\ Out-File\ -Encoding\ UTF8
vim.o.shell = "/usr/local/bin/fish"
-- string (default "")
-- 			global or local to buffer |global-local|
-- 	The name of an external program that will be used to format the lines
-- 	selected with the |gq| operator.  The program must take the input on
-- 	stdin and produce the output on stdout.  The Unix program "fmt" is
-- 	such a program.
-- 	If the 'formatexpr' option is not empty it will be used instead.
-- 	Otherwise, if 'formatprg' option is an empty string, the internal
-- 	format function will be used |C-indenting|.
-- 	Environment variables are expanded |:set_env|.  See |option-backslash|
-- 	about including spaces and backslashes.
-- 	This option cannot be set from a |modeline| or in the |sandbox|, for
-- 	security reasons.
vim.o.formatprg = ""
-- boolean	(default off)
-- 			global
-- 	When on, the OS function fsync() will be called after saving a file
-- 	(|:write|, |writefile()|, …), |swap-file| and |shada-file|. This
-- 	flushes the file to disk, ensuring that it is safely written.
-- 	Slow on some systems: writing buffers, quitting Nvim, and other
-- 	operations may sometimes take a few seconds.
vim.o.fsync = "false"
-- boolean	(default off)
-- 			global
-- 	When on, the ":substitute" flag 'g' is default on.  This means that
-- 	all matches in a line are substituted instead of one.  When a 'g' flag
-- 	is given to a ":substitute" command, this will toggle the substitution
-- 	of all or one match.  See |complex-change|.
vim.o.gdefault = "false"
-- string	(default "%f:%l:%m,%f:%l%m,%f  %l%m")
-- 			global
-- 	Format to recognize for the ":grep" command output.
-- 	This is a scanf-like string that uses the same format as the
-- 	'errorformat' option: see |errorformat|.
vim.o.grepformat = "%f:%l:%m,%f:%l%m,%f  %l%m"
-- string	(default "grep -n ",
-- 				 Unix: "grep -n $* /dev/null")
-- 			global or local to buffer |global-local|
-- 	Program to use for the |:grep| command.  This option may contain '%'
-- 	and '#' characters, which are expanded like when used in a command-
-- 	line.  The placeholder "$*" is allowed to specify where the arguments
-- 	will be included.  Environment variables are expanded |:set_env|.  See
-- 	|option-backslash| about including spaces and backslashes.
-- 	When your "grep" accepts the "-H" argument, use this to make ":grep"
-- 	also work well with a single file: >
-- 		:set grepprg=grep\ -nH
-- <	Special value: When 'grepprg' is set to "internal" the |:grep| command
-- 	works like |:vimgrep|, |:lgrep| like |:lvimgrep|, |:grepadd| like
-- 	|:vimgrepadd| and |:lgrepadd| like |:lvimgrepadd|.
-- 	See also the section |:make_makeprg|, since most of the comments there
-- 	apply equally to 'grepprg'.
-- 	This option cannot be set from a |modeline| or in the |sandbox|, for
-- 	security reasons.
vim.o.grepprg = "grep -n $* /dev/null"
-- string	(default "SHNHH HUnhsh")
-- 			global
-- 	Specifies the nroff macros that separate sections.  These are pairs of
-- 	two letters (See |object-motions|).  The default makes a section start
-- 	at the nroff macros ".SH", ".NH", ".H", ".HU", ".nh" and ".sh".
vim.o.sections = "SHNHH HUnhsh"
-- string	(default "")
-- 			global
-- 	When not empty, specifies a comma-separated list of fonts to be used
-- 	for double-width characters.  The first font that can be loaded is
-- 	used.
-- 	Note: The size of these fonts must be exactly twice as wide as the one
-- 	specified with 'guifont' and the same height.
vim.o.guifontwide = ""
-- string	(default "egmrLT"   (MS-Windows))
-- 			global
-- 	This option only has an effect in the GUI version of Vim.  It is a
-- 	sequence of letters which describes what components and options of the
-- 	GUI should be used.
-- 	To avoid problems with flags that are added in the future, use the
-- 	"+=" and "-=" feature of ":set" |add-option-flags|.
vim.o.guioptions = ""
-- string	(default empty)
-- 			global
-- 	When nonempty describes the text to use in a label of the GUI tab
-- 	pages line.  When empty and when the result is empty Vim will use a
-- 	default label.  See |setting-guitablabel| for more info.
vim.o.guitablabel = ""
-- string	(default empty)
-- 			global
-- 	When nonempty describes the text to use in a tooltip for the GUI tab
-- 	pages line.  When empty Vim will use a default tooltip.
-- 	This option is otherwise just like 'guitablabel' above.
-- 	You can include a line break.  Simplest method is to use |:let|: >
-- 		:let &guitabtooltip = "line one\nline two"
-- <
vim.o.guitabtooltip = ""
-- string	(default (MSDOS)  "$VIMRUNTIME\doc\help.txt"
-- 					 (others) "$VIMRUNTIME/doc/help.txt")
-- 			global
-- 	Name of the main help file.  All distributed help files should be
-- 	placed together in one directory.  Additionally, all "doc" directories
-- 	in 'runtimepath' will be used.
-- 	Environment variables are expanded |:set_env|.  For example:
-- 	"$VIMRUNTIME/doc/help.txt".  If $VIMRUNTIME is not set, $VIM is also
-- 	tried.  Also see |$VIMRUNTIME| and |option-backslash| about including
-- 	spaces and backslashes.
-- 	This option cannot be set from a |modeline| or in the |sandbox|, for
-- 	security reasons.
vim.o.helpfile = "/usr/local/Caskroom/neovim-nightly/latest/nvim-osx64/share/nvim/runtime/doc/help.txt"
-- number	(default 20)
-- 			global
-- 	Minimal initial height of the help window when it is opened with the
-- 	":help" command.  The initial height of the help window is half of the
-- 	current window, or (when the 'ea' option is on) the same as other
-- 	windows.  When the height is less than 'helpheight', the height is
-- 	set to 'helpheight'.  Set to zero to disable.
vim.o.helpheight = "20"
-- number	(default 0)
-- 			global
-- 	When bigger than zero, Vim will give messages about what it is doing.
-- 	Currently, these messages are given:
-- 	>= 1	When the shada file is read or written.
-- 	>= 2	When a file is ":source"'ed.
-- 	>= 3	UI info, terminal capabilities
-- 	>= 5	Every searched tags file and include file.
-- 	>= 8	Files for which a group of autocommands is executed.
-- 	>= 9	Every executed autocommand.
-- 	>= 12	Every executed function.
-- 	>= 13	When an exception is thrown, caught, finished, or discarded.
-- 	>= 14	Anything pending in a ":finally" clause.
-- 	>= 15	Every executed Ex command (truncated at 200 characters).
vim.o.verbose = "0"
-- boolean	(default on)
-- 			global
-- 	Show the line and column number of the cursor position, separated by a
-- 	comma.  When there is room, the relative position of the displayed
-- 	text in the file is shown on the far right:
-- 		Top	first line is visible
-- 		Bot	last line is visible
-- 		All	first and last line are visible
-- 		45%	relative position in the file
-- 	If 'rulerformat' is set, it will determine the contents of the ruler.
-- 	Each window has its own ruler.  If a window has a status line, the
-- 	ruler is shown there.  Otherwise it is shown in the last line of the
-- 	screen.  If the statusline is given by 'statusline' (i.e. not empty),
-- 	this option takes precedence over 'ruler' and 'rulerformat'
-- 	If the number of characters displayed is different from the number of
-- 	bytes in the text (e.g., for a TAB or a multi-byte character), both
-- 	the text column (byte number) and the screen column are shown,
-- 	separated with a dash.
-- 	For an empty line "0-1" is shown.
-- 	For an empty buffer the line number will also be zero: "0,0-1".
-- 	This option is reset when 'paste' is set and restored when 'paste' is
-- 	reset.
-- 	If you don't want to see the ruler all the time but want to know where
-- 	you are, use "g CTRL-G" |g_CTRL-G|.
vim.o.ruler = "true"
-- boolean	(Vim default: on, Vi default: off)
-- 			global
-- 	Show (partial) command in the last line of the screen.  Set this
-- 	option off if your terminal is slow.
-- 	In Visual mode the size of the selected area is shown:
-- 	- When selecting characters within a line, the number of characters.
-- 	  If the number of bytes is different it is also displayed: "2-6"
-- 	  means two characters and six bytes.
-- 	- When selecting more than one line, the number of lines.
-- 	- When selecting a block, the size in screen characters:
-- 	  {lines}x{columns}.
vim.o.showcmd = "true"
-- string	(default "dark")
-- 			global
-- 	When set to "dark" or "light", adjusts the default color groups for
-- 	that background type.  The |TUI| or other UI sets this on startup
-- 	(triggering |OptionSet|) if it can detect the background color.
vim.o.background = "dark"
-- boolean (default on)
-- 			global
-- 	This option and 'timeoutlen' determine the behavior when part of a
-- 	mapped key sequence has been received. For example, if <c-f> is
-- 	pressed and 'timeout' is set, Nvim will wait 'timeoutlen' milliseconds
-- 	for any key that can follow <c-f> in a mapping.
vim.o.timeout = "true"
-- number	(default 80 or terminal width)
-- 			global
-- 	Number of columns of the screen.  Normally this is set by the terminal
-- 	initialization and does not have to be set by hand.
-- 	When Vim is running in the GUI or in a resizable window, setting this
-- 	option will cause the window size to be changed.  When you only want
-- 	to use the size for the GUI, put the command in your |ginit.vim| file.
-- 	When you set this option and Vim is unable to change the physical
-- 	number of columns of the display, the display may be messed up.  For
-- 	the GUI it is always possible and Vim limits the number of columns to
-- 	what fits on the screen.  You can use this command to get the widest
-- 	window possible: >
-- 		:set columns=9999
-- <	Minimum value is 12, maximum value is 10000.
vim.o.columns = "80"
-- boolean	(default off)
-- 			global
-- 	When set case is ignored when completing file names and directories.
-- 	Has no effect when 'fileignorecase' is set.
-- 	Does not apply when the shell is used to expand wildcards, which
-- 	happens when there are special characters.
vim.o.wildignorecase = "false"
-- boolean	(default on)
-- 			global
-- 	Enables "enhanced mode" of command-line completion. When user hits
-- 	<Tab> (or 'wildchar') to invoke completion, the possible matches are
-- 	shown in a menu just above the command-line (see 'wildoptions'), with
-- 	the first match highlighted (overwriting the statusline).  Keys that
-- 	show the previous/next match (<Tab>/CTRL-P/CTRL-N) highlight the
-- 	match.
-- 	'wildmode' must specify "full": "longest" and "list" do not start
-- 	'wildmenu' mode. You can check the current mode with |wildmenumode()|.
-- 	The menu is canceled when a key is hit that is not used for selecting
-- 	a completion.
vim.o.wildmenu = "true"
-- string	(default: "full")
-- 			global
-- 	Completion mode that is used for the character specified with
-- 	'wildchar'.  It is a comma separated list of up to four parts.  Each
-- 	part specifies what to do for each consecutive use of 'wildchar'.  The
-- 	first part specifies the behavior for the first use of 'wildchar',
-- 	The second part for the second use, etc.
-- 	These are the possible values for each part:
-- 	""		Complete only the first match.
-- 	"full"		Complete the next full match.  After the last match,
-- 			the original string is used and then the first match
-- 			again.
-- 	"longest"	Complete till longest common string.  If this doesn't
-- 			result in a longer string, use the next part.
-- 	"longest:full"	Like "longest", but also start 'wildmenu' if it is
-- 			enabled.
-- 	"list"		When more than one match, list all matches.
-- 	"list:full"	When more than one match, list all matches and
-- 			complete first match.
-- 	"list:longest"	When more than one match, list all matches and
-- 			complete till longest common string.
-- 	When there is only a single match, it is fully completed in all cases.
vim.o.wildmode = "full"
vim.o.termpastefilter = "BS,HT,ESC,DEL"
-- string	(default "menu")
-- 			global
-- 			{only used in Win32}
-- 	Some GUI versions allow the access to menu entries by using the ALT
-- 	key in combination with a character that appears underlined in the
-- 	menu.  This conflicts with the use of the ALT key for mappings and
-- 	entering special characters.  This option tells what to do:
-- 	  no	Don't use ALT keys for menus.  ALT key combinations can be
-- 		mapped, but there is no automatic handling.
-- 	  yes	ALT key handling is done by the windowing system.  ALT key
-- 		combinations cannot be mapped.
-- 	  menu	Using ALT in combination with a character that is a menu
-- 		shortcut key, will be handled by the windowing system.  Other
-- 		keys can be mapped.
-- 	If the menu is disabled by excluding 'm' from 'guioptions', the ALT
-- 	key is never used for the menu.
-- 	This option is not used for <F10>; on Win32.
vim.o.winaltkeys = "menu"
-- number	(default 1)
-- 			global
-- 	The minimal height of a window, when it's not the current window.
-- 	This is a hard minimum, windows will never become smaller.
-- 	When set to zero, windows may be "squashed" to zero lines (i.e. just a
-- 	status bar) if necessary.  They will return to at least one line when
-- 	they become active (since the cursor has to have somewhere to go.)
-- 	Use 'winheight' to set the minimal height of the current window.
-- 	This option is only checked when making a window smaller.  Don't use a
-- 	large number, it will cause errors when opening more than a few
-- 	windows.  A value of 0 to 3 is reasonable.
vim.o.winminheight = "1"
-- number	(default 1)
-- 			global
-- 	The minimal width of a window, when it's not the current window.
-- 	This is a hard minimum, windows will never become smaller.
-- 	When set to zero, windows may be "squashed" to zero columns (i.e. just
-- 	a vertical separator) if necessary.  They will return to at least one
-- 	line when they become active (since the cursor has to have somewhere
-- 	to go.)
-- 	Use 'winwidth' to set the minimal width of the current window.
-- 	This option is only checked when making a window smaller.  Don't use a
-- 	large number, it will cause errors when opening more than a few
-- 	windows.  A value of 0 to 12 is reasonable.
vim.o.winminwidth = "1"
-- boolean	(default off)
-- 			global
-- 	Allows writing to any file with no need for "!" override.
vim.o.writeany = "false"
-- boolean	(default on with |+writebackup| feature, off
-- 					otherwise)
-- 			global
-- 	Make a backup before overwriting a file.  The backup is removed after
-- 	the file was successfully written, unless the 'backup' option is
-- 	also on.
-- 	WARNING: Switching this option off means that when Vim fails to write
-- 	your buffer correctly and then, for whatever reason, Vim exits, you
-- 	lose both the original file and what you were writing.  Only reset
-- 	this option if your file system is almost full and it makes the write
-- 	fail (and make sure not to exit Vim until the write was successful).
-- 	See |backup-table| for another explanation.
-- 	When the 'backupskip' pattern matches, a backup is not made anyway.
vim.o.writebackup = "true"
-- number	(default 0)
-- 			global
-- 	The number of milliseconds to wait for each character sent to the
-- 	screen.  When positive, characters are sent to the UI one by one.
-- 	See 'redrawdebug' for more options.  For debugging purposes.
vim.o.writedelay = "0"
-- string	(default "")
-- 			global
-- 	A list of autocommand event names, which are to be ignored.
-- 	When set to "all" or when "all" is one of the items, all autocommand
-- 	events are ignored, autocommands will not be executed.
-- 	Otherwise this is a comma separated list of event names.  Example: >
-- 	    :set ei=WinEnter,WinLeave
-- <
-- 				 *'expandtab'* *'et'* *'noexpandtab'* *'noet'*
vim.o.eventignore = ""
-- boolean	(default on, off when a |vimrc| or |gvimrc|
-- 					file is found, reset in |defaults.vim|)
-- 			global
-- 	This option has the effect of making Vim either more Vi-compatible, or
-- 	make Vim behave in a more useful way.
vim.o.compatible = "false"
-- string	(default: "")
-- 			local to buffer
-- 			{only for MS-Windows}
-- 	When this option is set it overrules 'shellslash' for completion:
-- 	- When this option is set to "slash", a forward slash is used for path
-- 	  completion in insert mode. This is useful when editing HTML tag, or
-- 	  Makefile with 'noshellslash' on Windows.
-- 	- When this option is set to "backslash", backslash is used. This is
-- 	  useful when editing a batch file with 'shellslash' set on Windows.
-- 	- When this option is empty, same character is used as for
-- 	  'shellslash'.
-- 	For Insert mode completion the buffer-local value is used.  For
-- 	command line completion the global value is used.
vim.o.completeslash = ""
-- boolean (default off)
-- 			global
-- 			{not available when compiled without the |+cscope|
-- 			feature}
-- 	Give messages when adding a cscope database.  See |cscopeverbose|.
-- 	NOTE: This option is reset when 'compatible' is set.
vim.o.cscopeverbose = "true"
-- boolean	(default off)
-- 			global
-- 	Makes the 'g' and 'c' flags of the ":substitute" command to be
-- 	toggled each time the flag is given.  See |complex-change|.  See
-- 	also 'gdefault' option.
-- 	Switching this option on may break plugins!
vim.o.edcompatible = "false"
-- boolean (default off)
-- 			global
-- 	Enables the reading of .vimrc, .exrc and .gvimrc in the current
-- 	directory.
vim.o.exrc = "false"
-- string (default: "latin1" or value from $LANG)
-- 			global
-- 	Sets the character encoding used inside Vim.  It applies to text in
-- 	the buffers, registers, Strings in expressions, text stored in the
-- 	viminfo file, etc.  It sets the kind of characters which Vim can work
-- 	with.  See |encoding-names| for the possible values.
vim.o.encoding = "utf-8"
-- number	(default 0)
-- 			global or local to window |global-local|
-- 	Minimal number of screen lines to keep above and below the cursor.
-- 	This will make some context visible around where you are working.  If
-- 	you set it to a very large value (999) the cursor line will always be
-- 	in the middle of the window (except at the start or end of the file or
-- 	when long lines wrap).
-- 	After using the local value, go back the global value with one of
-- 	these two: >
-- 		setlocal scrolloff<
-- 		setlocal scrolloff=-1
-- <	For scrolling horizontally see 'sidescrolloff'.
vim.o.scrolloff = "0"
-- string	(default "")
-- 			global
-- 	Language to use for menu translation.  Tells which file is loaded
-- 	from the "lang" directory in 'runtimepath': >
-- 		"lang/menu_" . &langmenu . ".vim"
-- <	(without the spaces).  For example, to always use the Dutch menus, no
-- 	matter what $LANG is set to: >
-- 		:set langmenu=nl_NL.ISO_8859-1
-- <	When 'langmenu' is empty, |v:lang| is used.
-- 	Only normal file name characters can be used, "/\*?[|<>" are illegal.
-- 	If your $LANG is set to a non-English language but you do want to use
-- 	the English menus: >
-- 		:set langmenu=none
-- <	This option must be set before loading menus, switching on filetype
-- 	detection or syntax highlighting.  Once the menus are defined setting
-- 	this option has no effect.  But you could do this: >
-- 		:source $VIMRUNTIME/delmenu.vim
-- 		:set langmenu=de_DE.ISO_8859-1
-- 		:source $VIMRUNTIME/menu.vim
-- <	Warning: This deletes all menus that you defined yourself!
vim.o.langmenu = ""
-- number	(default 24 or terminal height)
-- 			global
-- 	Number of lines of the Vim window.
-- 	Normally you don't need to set this.  It is done automatically by the
-- 	terminal initialization code.
-- 	When Vim is running in the GUI or in a resizable window, setting this
-- 	option will cause the window size to be changed.  When you only want
-- 	to use the size for the GUI, put the command in your |gvimrc| file.
-- 	Vim limits the number of lines to what fits on the screen.  You can
-- 	use this command to get the tallest window possible: >
-- 		:set lines=999
-- <	Minimum value is 2, maximum value is 1000.
vim.o.lines = "24"
-- boolean (default off, set in |defaults.vim|)
-- 			global
-- 			{only available when compiled with the |+langmap|
-- 			feature}
-- 	This is just like 'langremap' but with the value inverted.  It only
-- 	exists for backwards compatibility.  When setting 'langremap' then
-- 	'langnoremap' is set to the inverted value, and the other way around.
vim.o.langnoremap = "true"
-- boolean	(default off)
-- 			global
-- 	Round indent to multiple of 'shiftwidth'.  Applies to > and <
-- 	commands.  CTRL-T and CTRL-D in Insert mode always round the indent to
-- 	a multiple of 'shiftwidth' (this is Vi compatible).
vim.o.shiftround = "false"
-- string	(default "")
-- 			global or local to buffer |global-local|
-- 	List of file names, separated by commas, that are used to lookup words
-- 	for keyword completion commands |i_CTRL-X_CTRL-K|.  Each file should
-- 	contain a list of words.  This can be one word per line, or several
-- 	words per line, separated by non-keyword characters (white space is
-- 	preferred).  Maximum line length is 510 bytes.
vim.o.dictionary = ""
-- string	(default: "-c"; Windows: "/s /c")
-- 			global
-- 	Flag passed to the shell to execute "!" and ":!" commands; e.g.,
-- 	`bash.exe -c ls` or `cmd.exe /s /c "dir"`.  For Windows
-- 	systems, the default is set according to the value of 'shell', to
-- 	reduce the need to set this option by the user.
-- 	On Unix it can have more than one flag.  Each white space separated
-- 	part is passed as an argument to the shell command.
-- 	See |option-backslash| about including spaces and backslashes.
-- 	See |shell-unquoting| which talks about separating this option into
-- 	multiple arguments.
-- 	This option cannot be set from a |modeline| or in the |sandbox|, for
-- 	security reasons.
vim.o.shellcmdflag = "-c"
-- string	(default (as a single string):
-- 				     "8:SpecialKey,~:EndOfBuffer,@:NonText,
-- 				     d:Directory,e:ErrorMsg,i:IncSearch,
-- 				     l:Search,m:MoreMsg,M:ModeMsg,n:LineNr,
-- 				     a:LineNrAbove,b:LineNrBelow,
-- 				     N:CursorLineNr,r:Question,s:StatusLine,
-- 				     S:StatusLineNC,c:VertSplit,t:Title,
-- 				     v:Visual,V:VisualNOS,w:WarningMsg,
-- 				     W:WildMenu,f:Folded,F:FoldColumn,
-- 				     A:DiffAdd,C:DiffChange,D:DiffDelete,
-- 				     T:DiffText,>:SignColumn,-:Conceal,
-- 				     B:SpellBad,P:SpellCap,R:SpellRare,
-- 				     L:SpellLocal,+:Pmenu,=:PmenuSel,
-- 				     x:PmenuSbar,X:PmenuThumb,*:TabLine,
-- 				     #:TabLineSel,_:TabLineFill,!:CursorColumn,
-- 				     .:CursorLine,o:ColorColumn,q:QuickFixLine,
-- 				     z:StatusLineTerm,Z:StatusLineTermNC")
-- 			global
-- 	This option can be used to set highlighting mode for various
-- 	occasions.  It is a comma separated list of character pairs.  The
-- 	first character in a pair gives the occasion, the second the mode to
-- 	use for that occasion.  The occasions are:
-- 	|hl-SpecialKey|	 8  Meta and special keys listed with ":map"
-- 	|hl-EndOfBuffer|   ~  lines after the last line in the buffer
-- 	|hl-NonText|	 @  '@' at the end of the window and
-- 			    characters from 'showbreak'
-- 	|hl-Directory|	 d  directories in CTRL-D listing and other special
-- 			    things in listings
-- 	|hl-ErrorMsg|	 e  error messages
-- 			 h  (obsolete, ignored)
-- 	|hl-IncSearch|	 i  'incsearch' highlighting
-- 	|hl-Search|	 l  last search pattern highlighting (see 'hlsearch')
-- 	|hl-MoreMsg|	 m  |more-prompt|
-- 	|hl-ModeMsg|	 M  Mode (e.g., "-- INSERT --")
-- 	|hl-LineNr|	 n  line number for ":number" and ":#" commands, and
-- 			    when 'number' or 'relativenumber' option is set.
-- 	|hl-LineNrAbove|   a  line number above the cursor for when the
-- 			    'relativenumber' option is set.
-- 	|hl-LineNrBelow|   b  line number below the cursor for when the
-- 			    'relativenumber' option is set.
-- 	|hl-CursorLineNr|  N like n for when 'cursorline' or 'relativenumber' is
-- 			    set.
-- 	|hl-Question|	 r  |hit-enter| prompt and yes/no questions
-- 	|hl-StatusLine|	 s  status line of current window |status-line|
-- 	|hl-StatusLineNC|  S  status lines of not-current windows
-- 	|hl-Title|	 t  Titles for output from ":set all", ":autocmd" etc.
-- 	|hl-VertSplit|	 c  column used to separate vertically split windows
-- 	|hl-Visual|	 v  Visual mode
-- 	|hl-VisualNOS|	 V  Visual mode when Vim does is "Not Owning the
-- 			    Selection" Only X11 Gui's |gui-x11| and
-- 			    |xterm-clipboard|.
-- 	|hl-WarningMsg|	 w  warning messages
-- 	|hl-WildMenu|	 W  wildcard matches displayed for 'wildmenu'
-- 	|hl-Folded|	 f  line used for closed folds
-- 	|hl-FoldColumn|	 F  'foldcolumn'
-- 	|hl-DiffAdd|	 A  added line in diff mode
-- 	|hl-DiffChange|	 C  changed line in diff mode
-- 	|hl-DiffDelete|	 D  deleted line in diff mode
-- 	|hl-DiffText|	 T  inserted text in diff mode
-- 	|hl-SignColumn|	 >  column used for |signs|
-- 	|hl-Conceal|	 -  the placeholders used for concealed characters
-- 			    (see 'conceallevel')
-- 	|hl-SpellBad|	 B  misspelled word |spell|
-- 	|hl-SpellCap|	 P  word that should start with capital |spell|
-- 	|hl-SpellRare|	 R  rare word |spell|
-- 	|hl-SpellLocal|	 L  word from other region |spell|
-- 	|hl-Pmenu|	 +  popup menu normal line
-- 	|hl-PmenuSel|	 =  popup menu selected line
-- 	|hl-PmenuSbar|	 x  popup menu scrollbar
-- 	|hl-PmenuThumb|	 X  popup menu scrollbar thumb
vim.o.highlight = "8:SpecialKey,~:EndOfBuffer,z:TermCursor,Z:TermCursorNC,@:NonText,d:Directory,e:ErrorMsg,i:IncSearch,l:Search,m:MoreMsg,M:ModeMsg,n:LineNr,N:CursorLineNr,r:Question,s:StatusLine,S:StatusLineNC,c:VertSplit,t:Title,v:Visual,V:VisualNOS,w:WarningMsg,W:WildMenu,f:Folded,F:FoldColumn,A:DiffAdd,C:DiffChange,D:DiffDelete,T:DiffText,>:SignColumn,-:Conceal,B:SpellBad,P:SpellCap,R:SpellRare,L:SpellLocal,+:Pmenu,=:PmenuSel,x:PmenuSbar,X:PmenuThumb,*:TabLine,#:TabLineSel,_:TabLineFill,!:CursorColumn,.:CursorLine,o:ColorColumn,q:QuickFixLine,0:Whitespace,I:NormalNC"
-- string (default: "ucs-bom,utf-8,default,latin1")
-- 			global
-- 	This is a list of character encodings considered when starting to edit
-- 	an existing file.  When a file is read, Vim tries to use the first
-- 	mentioned character encoding.  If an error is detected, the next one
-- 	in the list is tried.  When an encoding is found that works,
-- 	'fileencoding' is set to it.  If all fail, 'fileencoding' is set to
-- 	an empty string, which means that UTF-8 is used.
-- 		WARNING: Conversion can cause loss of information! You can use
-- 		the |++bad| argument to specify what is done with characters
-- 		that can't be converted.
-- 	For an empty file or a file with only ASCII characters most encodings
-- 	will work and the first entry of 'fileencodings' will be used (except
-- 	"ucs-bom", which requires the BOM to be present).  If you prefer
-- 	another encoding use an BufReadPost autocommand event to test if your
-- 	preferred encoding is to be used.  Example: >
-- 		au BufReadPost * if search('\S', 'w') == 0 |
-- 			\ set fenc=iso-2022-jp | endif
-- <	This sets 'fileencoding' to "iso-2022-jp" if the file does not contain
-- 	non-blank characters.
-- 	When the |++enc| argument is used then the value of 'fileencodings' is
-- 	not used.
-- 	Note that 'fileencodings' is not used for a new file, the global value
-- 	of 'fileencoding' is used instead.  You can set it with: >
-- 		:setglobal fenc=iso-8859-2
-- <	This means that a non-existing file may get a different encoding than
-- 	an empty file.
-- 	The special value "ucs-bom" can be used to check for a Unicode BOM
-- 	(Byte Order Mark) at the start of the file.  It must not be preceded
-- 	by "utf-8" or another Unicode encoding for this to work properly.
-- 	An entry for an 8-bit encoding (e.g., "latin1") should be the last,
-- 	because Vim cannot detect an error, thus the encoding is always
-- 	accepted.
-- 	The special value "default" can be used for the encoding from the
-- 	environment.  It is useful when your environment uses a non-latin1
-- 	encoding, such as Russian.
-- 	When a file contains an illegal UTF-8 byte sequence it won't be
-- 	recognized as "utf-8".  You can use the |8g8| command to find the
-- 	illegal byte sequence.
-- 	WRONG VALUES:			WHAT'S WRONG:
-- 		latin1,utf-8		"latin1" will always be used
-- 		utf-8,ucs-bom,latin1	BOM won't be recognized in an utf-8
-- 					file
-- 		cp1250,latin1		"cp1250" will always be used
-- 	If 'fileencodings' is empty, 'fileencoding' is not modified.
-- 	See 'fileencoding' for the possible values.
-- 	Setting this option does not have an effect until the next time a file
-- 	is read.
vim.o.fileencodings = "ucs-bom,utf-8,default,latin1"
-- string	(default "lastline,msgsep", Vi default: "")
-- 			global
-- 	Change the way text is displayed.  This is comma separated list of
-- 	flags:
-- 	lastline	When included, as much as possible of the last line
-- 			in a window will be displayed.  "@@@" is put in the
-- 			last columns of the last screen line to indicate the
-- 			rest of the line is not displayed.
-- 	truncate	Like "lastline", but "@@@" is displayed in the first
-- 			column of the last screen line.  Overrules "lastline".
-- 	uhex		Show unprintable characters hexadecimal as <xx>
-- 			instead of using ^C and ~C.
-- 	msgsep		When showing messages longer than 'cmdheight', only
-- 			scroll the message lines, not the entire screen. The
-- 			separator line is decorated by |hl-MsgSeparator| and
-- 			the "msgsep" flag of 'fillchars'.
vim.o.display = "lastline,msgsep"
-- string	(default: "tab:> ,trail:-,nbsp:+"
-- 				 Vi default: "eol:$")
-- 			global or local to window |global-local|
-- 	Strings to use in 'list' mode and for the |:list| command.  It is a
-- 	comma separated list of string settings.
vim.o.listchars = "tab:> ,trail:-,nbsp:+"
-- string	(default "")
-- 			global
-- 	This is a list of fonts which will be used for the GUI version of Vim.
-- 	In its simplest form the value is just one font name.  When
-- 	the font cannot be found you will get an error message.  To try other
-- 	font names a list can be specified, font names separated with commas.
-- 	The first valid font is used.
vim.o.guifont = ""
-- string	(default "")
-- 			global or local to window |global-local|
-- 	Characters to fill the statuslines and vertical separators.
-- 	It is a comma separated list of items:
vim.o.fillchars = ""
-- number	(default 500)
-- 			global
-- 	Defines the maximum time in msec between two mouse clicks for the
-- 	second click to be recognized as a multi click.
vim.o.mousetime = "500"
-- boolean	(default on)			*E384* *E385*
-- 			global
-- 	Searches wrap around the end of the file.  Also applies to |]s| and
-- 	|[s|, searching for spelling mistakes.
vim.o.wrapscan = "true"
-- string	(default: "last")
-- 			global
-- 	Which directory to use for the file browser:
-- 	   last		Use same directory as with last file browser, where a
-- 			file was opened or saved.
-- 	   buffer	Use the directory of the related buffer.
-- 	   current	Use the current directory.
-- 	   {path}	Use the specified directory
vim.o.browsedir = ""
-- number	(default 2)
-- 			global
-- 	Threshold for reporting number of lines changed.  When the number of
-- 	changed lines is more than 'report' a message will be given for most
-- 	":" commands.  If you want it always, set 'report' to 0.
-- 	For the ":substitute" command the number of substitutions is used
-- 	instead of the number of lines.
vim.o.report = "2"
-- string	(default "")
-- 			global
-- 	When this option is not empty, it will be used for the icon text of
-- 	the window.  This happens only when the 'icon' option is on.
-- 	Only works if the terminal supports setting window icon text
-- 	When this option contains printf-style '%' items, they will be
-- 	expanded according to the rules used for 'statusline'.  See
-- 	'titlestring' for example settings.
-- 	This option cannot be set in a modeline when 'modelineexpr' is off.
vim.o.iconstring = ""
-- string	(default:     "$XDG_CONFIG_HOME/nvim,
-- 					       $XDG_CONFIG_DIRS[1]/nvim,
-- 					       $XDG_CONFIG_DIRS[2]/nvim,
-- 					       …
-- 					       $XDG_DATA_HOME/nvim[-data]/site,
-- 					       $XDG_DATA_DIRS[1]/nvim/site,
-- 					       $XDG_DATA_DIRS[2]/nvim/site,
-- 					       …
-- 					       $VIMRUNTIME,
-- 					       …
-- 					       $XDG_DATA_DIRS[2]/nvim/site/after,
-- 					       $XDG_DATA_DIRS[1]/nvim/site/after,
-- 					       $XDG_DATA_HOME/nvim[-data]/site/after,
-- 					       …
-- 					       $XDG_CONFIG_DIRS[2]/nvim/after,
-- 					       $XDG_CONFIG_DIRS[1]/nvim/after,
-- 					       $XDG_CONFIG_HOME/nvim/after")
-- 			global
-- 	List of directories to be searched for these runtime files:
-- 	  filetype.vim	filetypes by file name |new-filetype|
-- 	  scripts.vim	filetypes by file contents |new-filetype-scripts|
-- 	  autoload/	automatically loaded scripts |autoload-functions|
-- 	  colors/	color scheme files |:colorscheme|
-- 	  compiler/	compiler files |:compiler|
-- 	  doc/		documentation |write-local-help|
-- 	  ftplugin/	filetype plugins |write-filetype-plugin|
-- 	  indent/	indent scripts |indent-expression|
-- 	  keymap/	key mapping files |mbyte-keymap|
-- 	  lang/		menu translations |:menutrans|
-- 	  menu.vim	GUI menus |menu.vim|
-- 	  pack/		packages |:packadd|
-- 	  plugin/	plugin scripts |write-plugin|
-- 	  print/	files for printing |postscript-print-encoding|
-- 	  rplugin/	|remote-plugin| scripts
-- 	  spell/	spell checking files |spell|
-- 	  syntax/	syntax files |mysyntaxfile|
-- 	  tutor/	tutorial files |:Tutor|
vim.o.runtimepath = "/Users/folke/.config/nvim,/etc/xdg/nvim,/Users/folke/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Caskroom/neovim-nightly/latest/nvim-osx64/share/nvim/runtime,/usr/local/Caskroom/neovim-nightly/latest/nvim-osx64/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/folke/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/folke/.config/nvim/after"
-- string	(default "cscope")
-- 			global
-- 	Specifies the command to execute cscope.  See |cscopeprg|.
-- 	This option cannot be set from a |modeline| or in the |sandbox|, for
-- 	security reasons.
vim.o.cscopeprg = "cscope"
-- number	(default 1)
-- 			global
-- 	Minimal number of lines for the current window.  This is not a hard
-- 	minimum, Vim will use fewer lines if there is not enough room.  If the
-- 	focus goes to a window that is smaller, its size is increased, at the
-- 	cost of the height of other windows.
-- 	Set 'winheight' to a small number for normal editing.
-- 	Set it to 999 to make the current window fill most of the screen.
-- 	Other windows will be only 'winminheight' high.  This has the drawback
-- 	that ":all" will create only two windows.  To avoid "vim -o 1 2 3 4"
-- 	to create only two windows, set the option after startup is done,
-- 	using the |VimEnter| event: >
-- 		au VimEnter * set winheight=999
-- <	Minimum value is 1.
-- 	The height is not adjusted after one of the commands that change the
-- 	height of the current window.
-- 	'winheight' applies to the current window.  Use 'winminheight' to set
-- 	the minimal height for other windows.
vim.o.winheight = "1"
-- number  (default screen height - 1)
-- 			global
-- 	Window height.  Do not confuse this with the height of the Vim window,
-- 	use 'lines' for that.
-- 	Used for |CTRL-F| and |CTRL-B| when there is only one window and the
-- 	value is smaller than 'lines' minus one.  The screen will scroll
-- 	'window' minus two lines, with a minimum of one.
-- 	When 'window' is equal to 'lines' minus one CTRL-F and CTRL-B scroll
-- 	in a much smarter way, taking care of wrapping lines.
-- 	When resizing the Vim window, the value is smaller than 1 or more than
-- 	or equal to 'lines' it will be set to 'lines' minus 1.
vim.o.window = "23"
-- string	(default "pum,tagfile")
-- 			global
-- 	List of words that change how |cmdline-completion| is done.
-- 	  pum		Display the completion matches using the popupmenu
-- 			in the same style as the |ins-completion-menu|.
-- 	  tagfile	When using CTRL-D to list matching tags, the kind of
-- 			tag and the file of the tag is listed.	Only one match
-- 			is displayed per line.  Often used tag kinds are:
-- 				d	#define
-- 				f	function
vim.o.wildoptions = "pum,tagfile"
-- boolean	(default on)
-- 			global
-- 	Give a warning message when a shell command is used while the buffer
-- 	has been changed.
vim.o.warn = "true"
-- string	(default ""; with GTK+ GUI: "utf-8"; with
-- 						    Macintosh GUI: "macroman")
-- 			global
-- 	Encoding used for the terminal.  This specifies what character
-- 	encoding the keyboard produces and the display will understand.  For
-- 	the GUI it only applies to the keyboard ('encoding' is used for the
-- 	display).  Except for the Mac when 'macatsui' is off, then
-- 	'termencoding' should be "macroman".
-- 								*E617*
-- 	Note: This does not apply to the GTK+ GUI.  After the GUI has been
-- 	successfully initialized, 'termencoding' is forcibly set to "utf-8".
-- 	Any attempts to set a different value will be rejected, and an error
-- 	message is shown.
-- 	For the Win32 GUI and console versions 'termencoding' is not used,
-- 	because the Win32 system always passes Unicode characters.
-- 	When empty, the same encoding is used as for the 'encoding' option.
-- 	This is the normal value.
-- 	Not all combinations for 'termencoding' and 'encoding' are valid.  See
-- 	|encoding-table|.
-- 	The value for this option must be supported by internal conversions or
-- 	iconv().  When this is not possible no conversion will be done and you
-- 	will probably experience problems with non-ASCII characters.
-- 	Example: You are working with the locale set to euc-jp (Japanese) and
-- 	want to edit a UTF-8 file: >
-- 		:let &termencoding = &encoding
-- 		:set encoding=utf-8
-- <	You need to do this when your system has no locale support for UTF-8.
vim.o.termencoding = ""
